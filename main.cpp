//FluidInterface.h and FluidInterface.cxx - these two files are generated by Fluid - do not modify them!
//UserInterface.h and UserInterface.cpp - these are the two main files implementing the User interface
//UserInterface class is derived from FluidInterface class
//add/remove elements in the UserInterface class constructor using delete and new

//TODO:

//add a Control class where the main program will run
//ass an Algo class which will house all the algos and be accessed by Control - this is where trading decisions are made
//add a Data class which will deal with all the data - at first loaded from a file into some structure database
//at a later point the Data class will be getting a live feed from Interactive Brokers
//connect all the classes with pointers so they know about each other's existance - possibly through just one class

//first algo to write - something very very simple like a stupid scalper without any guards


#include "UserInterface.h"
#include "Pointers.h"
#include <iostream>

/*

//////////
STRUCTURE:
//////////

ONLY THREE MAIN PARTS (everything else included in on of three parts as a sub-part)

DIPLAY
DATA
CONTROL

Pointers - seperate - stores pointers to all three main parts



FluidInterface - base class for UserInterface - made by Fluid for easy modification. NEVER CHANGE THIS - to make changes - use fluid.exe
UserInterface - main display window
Control????
OrderBook - store all orders here
MarketData - get data from here (live data? stored data? how?)
StreamOfMktSnap - part of MarketData?



Algo - make decisions here (one algo? more algos?)





*/



int Control(Pointers  * pointers)
{

	UserInterface *window = (UserInterface*)pointers->get_ptr_t_UserInterface();
	
	//UserInterface * window = new UserInterface;
	

//	UserInterface * window2 = new UserInterface;

//	Fl_Text_Buffer * (window->textBuffer) = new Fl_Text_Buffer();
	
	//window->table->ptr_to_UserInterface = window;
	
	//window->text->buffer(window->textBuffer);
	//window->resizable(*window->text);
	window->show();
//	window2->show();
	return Fl::run();
}


int main()
{
	Pointers * pointers = new Pointers;
	UserInterface * window = new UserInterface;
	pointers->set_ptr_t_UserInterface(window);
	
	
	
	Control(pointers);





	return 0;
}